// 'use client';

// import { useState, useEffect, useRef } from 'react';
// import { motion, AnimatePresence, useInView } from 'framer-motion';
// import confetti from 'canvas-confetti';
// import { toast } from 'react-toastify';
// import styles from './CrazyRoadmapMap.module.css';

// // Complete roadmap data with all information
// const ROADMAP_DATA = [
//   {
//     id: 1,
//     phase: '–ï—Ç–∞–ø 1',
//     title: '–ó–∞–ø—É—Å–∫ —ñ –ø–æ—á–∞—Ç–∫–æ–≤–µ —Ñ—ñ–Ω–∞–Ω—Å—É–≤–∞–Ω–Ω—è',
//     duration: '–î–Ω—ñ 1-90',
//     price: '0.005¬¢',
//     priceUSD: 0.00005,
//     tokensAvailable: '100,000,000',
//     percentage: 10,
//     status: 'completed',
//     description: '–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç—É –¥–ª—è –º–∞–π–±—É—Ç–Ω—å–æ–≥–æ —É—Å–ø—ñ—Ö—É CrazyFox',
//     color: '#FF6B35',
//     gradient: 'linear-gradient(135deg, #FF6B35, #FF8E53)',
//     icon: 'üöÄ',
//     position: { x: 10, y: 85 },
//     goals: [
//       '–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç—É —Ç–∞ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ –Ω–∞ –±–ª–æ–∫—á–µ–π–Ω—ñ',
//       '–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–∞–π—Ç—É —Ç–∞ —Å–æ—Ü—ñ–∞–ª—å–Ω–∏—Ö –º–µ–¥—ñ–∞',
//       '–ü–æ—á–∞—Ç–æ–∫ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è —Å–ø—ñ–ª—å–Ω–æ—Ç–∏',
//       '–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó —Ç–∞ –±—ñ–ª–æ–≥–æ –ø–∞–ø–µ—Ä—É',
//       '–ü—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø—Ä–æ–¥–∞–∂—É'
//     ],
//     tasks: [
//       { week: '1-2', task: '–†–æ–∑—Ä–æ–±–∫–∞ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç—É —Ç–∞ –∞—É–¥–∏—Ç –±–µ–∑–ø–µ–∫–∏' },
//       { week: '3-4', task: '–ó–∞–ø—É—Å–∫ –±–µ—Ç–∞-–≤–µ—Ä—Å—ñ—ó –≤–µ–±-—Å–∞–π—Ç—É —Ç–∞ —Å–æ—Ü—ñ–∞–ª—å–Ω–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤' },
//       { week: '5-8', task: '–ü–µ—Ä—à–∏–π –µ—Ç–∞–ø –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ—ó –∫–∞–º–ø–∞–Ω—ñ—ó' },
//       { week: '9-12', task: '–ü–æ—á–∞—Ç–∫–æ–≤–∏–π –ø—Ä–∏–≤–∞—Ç–Ω–∏–π –ø—Ä–æ–¥–∞–∂ –¥–ª—è —Ä–∞–Ω–Ω—ñ—Ö —ñ–Ω–≤–µ—Å—Ç–æ—Ä—ñ–≤' },
//       { week: '13', task: '–ü—ñ–¥–≤–µ–¥–µ–Ω–Ω—è –ø—ñ–¥—Å—É–º–∫—ñ–≤ –ø–µ—Ä—à–æ–≥–æ –µ—Ç–∞–ø—É' }
//     ],
//     distribution: '10% –≤—ñ–¥ –∑–∞–≥–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ (100,000,000 —Ç–æ–∫–µ–Ω—ñ–≤) + 2% –¥–ª—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ —Ä–∞–Ω–Ω—ñ—Ö —á–ª–µ–Ω—ñ–≤ —Å–ø—ñ–ª—å–Ω–æ—Ç–∏',
//     landmark: 'üèÅ –°—Ç–∞—Ä—Ç–æ–≤–∞ –ø–ª–æ—â–∞–¥–∫–∞'
//   },
//   {
//     id: 2,
//     phase: '–ï—Ç–∞–ø 2',
//     title: '–†–æ–∑–≤–∏—Ç–æ–∫ –ø—Ä–æ–¥—É–∫—Ç—É',
//     duration: '–î–Ω—ñ 91-180',
//     price: '0.006¬¢',
//     priceUSD: 0.00006,
//     tokensAvailable: '150,000,000',
//     percentage: 15,
//     status: 'in-progress',
//     description: '–†–æ–∑–±—É–¥–æ–≤–∞ –µ–∫–æ—Å–∏—Å—Ç–µ–º–∏ —Ç–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É –ø—Ä–æ–µ–∫—Ç—É',
//     color: '#4ECDC4',
//     gradient: 'linear-gradient(135deg, #4ECDC4, #44A08D)',
//     icon: 'üõ†Ô∏è',
//     position: { x: 85, y: 70 },
//     goals: [
//       '–†–æ–∑—à–∏—Ä–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—ñ–≤',
//       '–ó–∞–ø—É—Å–∫ MVP (–º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ –∂–∏—Ç—Ç—î–∑–¥–∞—Ç–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç—É)',
//       '–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–µ—Ä—à–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤',
//       '–†–æ–∑—à–∏—Ä–µ–Ω–Ω—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ—ó –∫–∞–º–ø–∞–Ω—ñ—ó'
//     ],
//     tasks: [
//       { week: '14-16', task: '–†–æ–∑—à–∏—Ä–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏, –Ω–∞–π–º –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç—ñ–≤' },
//       { week: '17-20', task: '–†–æ–∑—Ä–æ–±–∫–∞ —Ç–∞ –∑–∞–ø—É—Å–∫ MVP —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É' },
//       { week: '21-24', task: '–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ –ø–µ—Ä—à–∏–º–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏' },
//       { week: '25-26', task: '–î—Ä—É–≥–∏–π –ø—É–±–ª—ñ—á–Ω–∏–π –ø—Ä–æ–¥–∞–∂ —Ç–æ–∫–µ–Ω—ñ–≤ –∑–∞ –Ω–æ–≤–æ—é —Ü—ñ–Ω–æ—é' }
//     ],
//     distribution: '15% –≤—ñ–¥ –∑–∞–≥–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ (150,000,000 —Ç–æ–∫–µ–Ω—ñ–≤) + 3% –¥–ª—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∏—Ö –∑–∞—Ö–æ–¥—ñ–≤',
//     landmark: 'üè≠ –ó–∞–≤–æ–¥ —ñ–Ω–Ω–æ–≤–∞—Ü—ñ–π'
//   },
//   {
//     id: 3,
//     phase: '–ï—Ç–∞–ø 3',
//     title: '–†–æ–∑—à–∏—Ä–µ–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è',
//     duration: '–î–Ω—ñ 181-270',
//     price: '0.007¬¢',
//     priceUSD: 0.00007,
//     tokensAvailable: '200,000,000',
//     percentage: 20,
//     status: 'planned',
//     description: '–í–ø—Ä–æ–≤–∞–¥–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π —Ç–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π –µ–∫–æ—Å–∏—Å—Ç–µ–º–∏',
//     color: '#45B7D1',
//     gradient: 'linear-gradient(135deg, #45B7D1, #2980B9)',
//     icon: 'üíé',
//     position: { x: 25, y: 45 },
//     goals: [
//       '–£–¥–æ—Å–∫–æ–Ω–∞–ª–µ–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤—ñ–¥–≥—É–∫—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤',
//       '–ó–∞–ø—É—Å–∫ –ø–µ—Ä—à–æ—ó –≤–µ—Ä—Å—ñ—ó –≥–∞–º–∞–Ω—Ü—è',
//       '–í–ø—Ä–æ–≤–∞–¥–∂–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥—É',
//       '–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ –±—ñ–ª—å—à–∏–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –µ–∫–æ—Å–∏—Å—Ç–µ–º–∏'
//     ],
//     tasks: [
//       { week: '27-30', task: '–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤—ñ–¥–≥—É–∫—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤' },
//       { week: '31-34', task: '–†–æ–∑—Ä–æ–±–∫–∞ —Ç–∞ –∑–∞–ø—É—Å–∫ –≥–∞–º–∞–Ω—Ü—è –¥–ª—è —Ç–æ–∫–µ–Ω–∞' },
//       { week: '35-38', task: '–í–ø—Ä–æ–≤–∞–¥–∂–µ–Ω–Ω—è –º–µ—Ö–∞–Ω—ñ–∑–º—É —Å—Ç–µ–π–∫—ñ–Ω–≥—É —Ç–∞ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥' }
//     ],
//     distribution: '20% –≤—ñ–¥ –∑–∞–≥–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ (200,000,000 —Ç–æ–∫–µ–Ω—ñ–≤) + 5% –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–∏ —Å—Ç–µ–π–∫—ñ–Ω–≥—É',
//     landmark: 'üíé –î—ñ–∞–º–∞–Ω—Ç–æ–≤—ñ –∫–æ–ø–∞–ª—å–Ω—ñ'
//   },
//   {
//     id: 4,
//     phase: '–ï—Ç–∞–ø 4',
//     title: '–ó—Ä–æ—Å—Ç–∞–Ω–Ω—è –µ–∫–æ—Å–∏—Å—Ç–µ–º–∏',
//     duration: '–î–Ω—ñ 271-360',
//     price: '0.008¬¢',
//     priceUSD: 0.00008,
//     tokensAvailable: '200,000,000',
//     percentage: 20,
//     status: 'planned',
//     description: '–†–æ–∑–±—É–¥–æ–≤–∞ DeFi –µ–∫–æ—Å–∏—Å—Ç–µ–º–∏ —Ç–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∏—Ö –±—ñ—Ä–∂',
//     color: '#96CEB4',
//     gradient: 'linear-gradient(135deg, #96CEB4, #85C1A4)',
//     icon: 'üå±',
//     position: { x: 75, y: 30 },
//     goals: [
//       '–†–æ–∑—Ä–æ–±–∫–∞ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –∫–æ—Ä–∏—Å–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π',
//       '–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∏—Ö –¥–æ–¥–∞—Ç–∫—ñ–≤ (dApps)',
//       '–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ –ª—ñ—Å—Ç–∏–Ω–≥—É –Ω–∞ –ø–µ—Ä—à–∏—Ö –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∏—Ö –±—ñ—Ä–∂–∞—Ö (DEX)',
//       '–†–æ–∑—à–∏—Ä–µ–Ω–Ω—è –≥–µ–æ–≥—Ä–∞—Ñ—ñ—á–Ω–æ–≥–æ –æ—Ö–æ–ø–ª–µ–Ω–Ω—è'
//     ],
//     tasks: [
//       { week: '39-42', task: '–†–æ–∑—Ä–æ–±–∫–∞ –ø–µ—Ä—à–∏—Ö dApps –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º —Ç–æ–∫–µ–Ω–∞' },
//       { week: '43-46', task: '–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó –¥–ª—è –ª—ñ—Å—Ç–∏–Ω–≥—É –Ω–∞ DEX' },
//       { week: '47-50', task: '–ì–ª–æ–±–∞–ª—å–Ω–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞ –∫–∞–º–ø–∞–Ω—ñ—è' },
//       { week: '51-52', task: '–ü—ñ–¥–≤–µ–¥–µ–Ω–Ω—è –ø—ñ–¥—Å—É–º–∫—ñ–≤ —á–µ—Ç–≤–µ—Ä—Ç–æ–≥–æ –µ—Ç–∞–ø—É' }
//     ],
//     distribution: '20% –≤—ñ–¥ –∑–∞–≥–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ (200,000,000 —Ç–æ–∫–µ–Ω—ñ–≤) + 5% –¥–ª—è –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ –Ω–∞ DEX',
//     landmark: 'üå≥ –õ—ñ—Å –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π'
//   },
//   {
//     id: 5,
//     phase: '–ï—Ç–∞–ø 5',
//     title: '–ü–µ—Ä–µ–¥–±—ñ—Ä–∂–æ–≤–∏–π –µ—Ç–∞–ø',
//     duration: '–î–Ω—ñ 361-450',
//     price: '0.009¬¢',
//     priceUSD: 0.00009,
//     tokensAvailable: '150,000,000',
//     percentage: 15,
//     status: 'planned',
//     description: '–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ –≤–µ–ª–∏–∫–∏—Ö —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∏—Ö –±—ñ—Ä–∂ —Ç–∞ –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É',
//     color: '#FECA57',
//     gradient: 'linear-gradient(135deg, #FECA57, #F39C12)',
//     icon: 'üèÜ',
//     position: { x: 40, y: 15 },
//     goals: [
//       '–ê—É–¥–∏—Ç –±–µ–∑–ø–µ–∫–∏ –≤—ñ–¥ –ø—Ä–æ–≤—ñ–¥–Ω–∏—Ö —Ñ—ñ—Ä–º',
//       '–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ –ª—ñ—Å—Ç–∏–Ω–≥—É –Ω–∞ —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∏—Ö –±—ñ—Ä–∂–∞—Ö (CEX)',
//       '–†–æ–∑—à–∏—Ä–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ —Ç–∞ –µ–∫–æ—Å–∏—Å—Ç–µ–º–∏',
//       '–í–µ–ª–∏–∫—ñ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞ —Ç–∞ –∫–æ–ª–∞–±–æ—Ä–∞—Ü—ñ—ó'
//     ],
//     tasks: [
//       { week: '53-56', task: '–ü—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞—É–¥–∏—Ç—É –±–µ–∑–ø–µ–∫–∏' },
//       { week: '57-60', task: '–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó –¥–ª—è –ª—ñ—Å—Ç–∏–Ω–≥—É –Ω–∞ CEX' },
//       { week: '61-64', task: '–ü–µ—Ä–µ–≥–æ–≤–æ—Ä–∏ –∑ –±—ñ—Ä–∂–∞–º–∏ —Ç–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ –ª—ñ—Å—Ç–∏–Ω–≥—É' }
//     ],
//     distribution: '15% –≤—ñ–¥ –∑–∞–≥–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ (150,000,000 —Ç–æ–∫–µ–Ω—ñ–≤) + 10% —Ä–µ–∑–µ—Ä–≤ –¥–ª—è –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ –Ω–∞ CEX',
//     landmark: 'üèõÔ∏è –ü–∞–ª–∞—Ü –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏'
//   },
//   {
//     id: 6,
//     phase: '–ï—Ç–∞–ø 6',
//     title: '–í–∏—Ö—ñ–¥ –Ω–∞ –±—ñ—Ä–∂—É',
//     duration: '–î–Ω—ñ 451-540',
//     price: '0.01¬¢',
//     priceUSD: 0.0001,
//     tokensAvailable: '100,000,000',
//     percentage: 10,
//     status: 'planned',
//     description: '–î–æ—Å—è–≥–Ω–µ–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ—ó –º–µ—Ç–∏ —Ç–∞ –≤–∏—Ö—ñ–¥ –Ω–∞ —Å–≤—ñ—Ç–æ–≤–∏–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∏–π —Ä–∏–Ω–æ–∫',
//     color: '#E74C3C',
//     gradient: 'linear-gradient(135deg, #E74C3C, #C0392B)',
//     icon: 'üåü',
//     position: { x: 90, y: 5 },
//     goals: [
//       '–û—Ñ—ñ—Ü—ñ–π–Ω–∏–π –ª—ñ—Å—Ç–∏–Ω–≥ –Ω–∞ —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∏—Ö –±—ñ—Ä–∂–∞—Ö',
//       '–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ—ó –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ—ó –∫–∞–º–ø–∞–Ω—ñ—ó',
//       '–ó–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ —Ç–∞ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è –≤–∞—Ä—Ç–æ—Å—Ç—ñ —Ç–æ–∫–µ–Ω–∞',
//       '–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ–≤–≥–æ—Å—Ç—Ä–æ–∫–æ–≤–æ—ó —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó —Ä–æ–∑–≤–∏—Ç–∫—É'
//     ],
//     tasks: [
//       { week: '65-68', task: '–õ—ñ—Å—Ç–∏–Ω–≥ –Ω–∞ –ø–µ—Ä—à–∏—Ö —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∏—Ö –±—ñ—Ä–∂–∞—Ö' },
//       { week: '69-72', task: '–ì–ª–æ–±–∞–ª—å–Ω–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞ –∫–∞–º–ø–∞–Ω—ñ—è' },
//       { week: '73-76', task: '–†–æ–∑—à–∏—Ä–µ–Ω–Ω—è –ª—ñ—Å—Ç–∏–Ω–≥—ñ–≤ –Ω–∞ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –±—ñ—Ä–∂—ñ' },
//       { week: '77-78', task: '–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –¥–æ–≤–≥–æ—Å—Ç—Ä–æ–∫–æ–≤–æ—ó —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—ñ —Ä–æ–∫–∏' }
//     ],
//     distribution: '10% –≤—ñ–¥ –∑–∞–≥–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ (100,000,000 —Ç–æ–∫–µ–Ω—ñ–≤) + 5% –¥–ª—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∏—Ö –∑–∞—Ö–æ–¥—ñ–≤',
//     landmark: 'üåô –ú–Ü–°–Ø–¶–¨ - –ù–ê–®–ê –¶–Ü–õ–¨!'
//   }
// ];

// // Fixed landmarks positions to avoid conflicts with phases
// const LANDMARKS = [
//   { id: 'crypto-volcano', position: { x: 55, y: 75 }, icon: 'üåã', name: 'Crypto Volcano', description: '–î–µ –Ω–∞—Ä–æ–¥–∂—É—é—Ç—å—Å—è —Ç–æ–∫–µ–Ω–∏' },
//   { id: 'defi-castle', position: { x: 12, y: 25 }, icon: 'üè∞', name: 'DeFi Castle', description: '–§–æ—Ä—Ç–µ—Ü—è –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–∞—Ü—ñ—ó' },
//   { id: 'nft-gallery', position: { x: 82, y: 45 }, icon: 'üñºÔ∏è', name: 'NFT Gallery', description: '–ú—É–∑–µ–π —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –º–∏—Å—Ç–µ—Ü—Ç–≤–∞' },
//   { id: 'whale-island', position: { x: 60, y: 55 }, icon: 'üêã', name: 'Whale Island', description: '–û—Å—Ç—Ä—ñ–≤ –≤–µ–ª–∏–∫–∏—Ö —ñ–Ω–≤–µ—Å—Ç–æ—Ä—ñ–≤' },
//   { id: 'meme-factory', position: { x: 35, y: 25 }, icon: 'üè≠', name: 'Meme Factory', description: '–§–∞–±—Ä–∏–∫–∞ –º–µ–º—ñ–≤' },
// ];

// // FIXED STATIC PATH - Aligned properly with phases
// const STATIC_PATH = `M 10 85 
//                      Q 50 75 25 45 
//                      Q 5 25 40 15 
//                      Q 60 10 75 30 
//                      Q 85 20 90 5`;

// // Weather Effects Component
// const WeatherEffects = ({ selectedPhase }) => {
//   const [particles, setParticles] = useState([]);

//   useEffect(() => {
//     if (!selectedPhase) return;

//     const generateParticles = () => {
//       const newParticles = [];
//       const particleCount = 15;
      
//       for (let i = 0; i < particleCount; i++) {
//         newParticles.push({
//           id: i,
//           x: Math.random() * 100,
//           y: Math.random() * 100,
//           size: Math.random() * 3 + 1,
//           speed: Math.random() * 2 + 1,
//           color: selectedPhase.color
//         });
//       }
//       setParticles(newParticles);
//     };

//     generateParticles();
//     const interval = setInterval(generateParticles, 3000);
    
//     return () => clearInterval(interval);
//   }, [selectedPhase]);

//   if (!selectedPhase) return null;

//   return (
//     <div className={styles.weatherEffect}>
//       {particles.map((particle) => (
//         <motion.div
//           key={particle.id}
//           className={styles.particle}
//           style={{
//             backgroundColor: particle.color,
//             width: `${particle.size}px`,
//             height: `${particle.size}px`,
//             left: `${particle.x}%`,
//             top: `${particle.y}%`,
//           }}
//           animate={{
//             y: [0, -100],
//             opacity: [0, 1, 0],
//             scale: [0, 1, 0]
//           }}
//           transition={{
//             duration: particle.speed,
//             repeat: Infinity,
//             ease: "easeOut"
//           }}
//         />
//       ))}
//     </div>
//   );
// };

// // Roadmap Phase Component with improved hover positioning
// const RoadmapPhase = ({ phase, index, isActive, onClick, selectedPhase }) => {
//   const ref = useRef(null);
//   const isInView = useInView(ref, { once: true });
//   const [isHovered, setIsHovered] = useState(false);

//   const statusConfig = {
//     completed: { color: '#2ECC71', icon: '‚úÖ', glow: '#2ECC7140' },
//     'in-progress': { color: '#F39C12', icon: 'üîÑ', glow: '#F39C1240' },
//     planned: { color: '#95A5A6', icon: 'üìÖ', glow: '#95A5A640' }
//   };

//   const isSelected = selectedPhase?.id === phase.id;

//   const handleClick = () => {
//     onClick(phase);
//     confetti({
//       particleCount: 100,
//       spread: 70,
//       origin: { 
//         x: phase.position.x / 100, 
//         y: 1 - phase.position.y / 100 
//       },
//       colors: [phase.color, '#FF6B35', '#4ECDC4']
//     });
//   };

//   // Improved smart positioning for hover cards to prevent clipping
//   const getHoverCardStyle = () => {
//     const { x, y } = phase.position;
//     let style = {
//       position: 'absolute',
//       zIndex: 1000,
//     };

//     // More conservative positioning to prevent clipping
//     if (x > 65) {
//       // Right side - show card to the left with more margin
//       style = { ...style, right: '120%', top: '-100%' };
//     } else if (x < 35) {
//       // Left side - show card to the right with more margin
//       style = { ...style, left: '120%', top: '-100%' };
//     } else if (y < 30) {
//       // Top - show card below with safe margin
//       style = { ...style, top: '120%', left: '-100%' };
//     } else if (y > 70) {
//       // Bottom - show card above with safe margin
//       style = { ...style, bottom: '120%', left: '-100%' };
//     } else {
//       // Middle - show to the side based on x position
//       if (x < 50) {
//         style = { ...style, left: '120%', top: '-50%' };
//       } else {
//         style = { ...style, right: '120%', top: '-50%' };
//       }
//     }

//     return style;
//   };

//   return (
//     <motion.div
//       ref={ref}
//       className={styles.roadmapPhase}
//       style={{
//         left: `${phase.position.x}%`,
//         top: `${phase.position.y}%`,
//         zIndex: isSelected ? 1000 : isHovered ? 100 : 10
//       }}
//       initial={{ opacity: 0, scale: 0, rotate: -180 }}
//       animate={isInView ? { 
//         opacity: 1, 
//         scale: isSelected ? 1.3 : 1, 
//         rotate: 0
//       } : {}}
//       transition={{ 
//         duration: 0.8, 
//         delay: index * 0.2,
//         type: "spring",
//         stiffness: 100 
//       }}
//       whileHover={{ 
//         scale: isSelected ? 1.4 : 1.2,
//         transition: { duration: 0.2 }
//       }}
//       onClick={handleClick}
//       onHoverStart={() => setIsHovered(true)}
//       onHoverEnd={() => setIsHovered(false)}
//     >
//       {/* Enhanced Glow effect */}
//       <motion.div 
//         className={styles.phaseGlow}
//         animate={{
//           scale: isSelected ? [1.2, 1.8, 1.2] : [1, 1.2, 1],
//           opacity: isSelected ? [0.8, 1, 0.8] : [0.5, 0.8, 0.5]
//         }}
//         transition={{
//           duration: isSelected ? 1 : 2,
//           repeat: Infinity,
//           ease: "easeInOut"
//         }}
//         style={{ 
//           background: `radial-gradient(circle, ${isSelected ? phase.color + '80' : statusConfig[phase.status].glow} 0%, transparent 70%)`
//         }}
//       />

//       {/* Main phase circle */}
//       <motion.div 
//         className={styles.phaseCircle}
//         style={{ 
//           background: phase.gradient,
//           borderColor: isSelected ? '#FFD700' : statusConfig[phase.status].color,
//           borderWidth: isSelected ? '4px' : '2px'
//         }}
//         animate={phase.status === 'in-progress' || isSelected ? {
//           rotate: 360,
//           transition: { duration: isSelected ? 5 : 10, repeat: Infinity, ease: "linear" }
//         } : {}}
//       >
//         <div className={styles.phaseIcon}>{phase.icon}</div>
//         <div className={styles.phaseNumber}>{phase.id}</div>
//       </motion.div>

//       {/* Status indicator */}
//       <motion.div 
//         className={styles.statusIndicator}
//         style={{ 
//           backgroundColor: isSelected ? '#FFD700' : statusConfig[phase.status].color,
//           boxShadow: isSelected ? '0 0 20px #FFD700' : 'none'
//         }}
//         animate={{
//           scale: (phase.status === 'in-progress' || isSelected) ? [1, 1.2, 1] : 1
//         }}
//         transition={{
//           duration: 1,
//           repeat: (phase.status === 'in-progress' || isSelected) ? Infinity : 0
//         }}
//       >
//         {isSelected ? '‚≠ê' : statusConfig[phase.status].icon}
//       </motion.div>

//       {/* Improved hover info card with smart positioning */}
//       <AnimatePresence>
//         {isHovered && !isSelected && (
//           <motion.div 
//             className={styles.hoverCard}
//             style={getHoverCardStyle()}
//             initial={{ opacity: 0, scale: 0.8 }}
//             animate={{ opacity: 1, scale: 1 }}
//             exit={{ opacity: 0, scale: 0.8 }}
//             transition={{ duration: 0.2 }}
//           >
//             <div 
//               className={styles.cardBackground}
//               style={{ background: phase.gradient }}
//             />
//             <div className={styles.cardContent}>
//               <div className={styles.cardHeader}>
//                 <div className={styles.cardPhase}>{phase.phase}</div>
//                 <div className={styles.cardPrice}>{phase.price}</div>
//               </div>
//               <div className={styles.cardTitle}>{phase.title}</div>
//               <div className={styles.cardDuration}>{phase.duration}</div>
//               <div className={styles.cardTokens}>
//                 <span className={styles.cardTokensLabel}>–¢–æ–∫–µ–Ω—ñ–≤:</span>
//                 <span className={styles.cardTokensValue}>{phase.tokensAvailable}</span>
//               </div>
//               <div className={styles.cardLandmark}>{phase.landmark}</div>
//               <div className={styles.cardAction}>
//                 <span>üîç –ö–ª—ñ–∫–Ω–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π</span>
//               </div>
//             </div>
//           </motion.div>
//         )}
//       </AnimatePresence>
//     </motion.div>
//   );
// };

// // Landmark Component with better positioning
// const Landmark = ({ landmark, index, selectedPhase }) => {
//   const [isHovered, setIsHovered] = useState(false);
  
//   const isAffectedByPhase = selectedPhase && Math.abs(landmark.position.x - selectedPhase.position.x) < 30;

//   return (
//     <motion.div
//       className={styles.landmark}
//       style={{
//         left: `${landmark.position.x}%`,
//         top: `${landmark.position.y}%`,
//       }}
//       initial={{ opacity: 0, scale: 0 }}
//       animate={{ 
//         opacity: isAffectedByPhase ? 1 : 0.7, 
//         scale: isAffectedByPhase ? 1.2 : 1,
//         y: [0, -5, 0],
//         filter: isAffectedByPhase ? `drop-shadow(0 0 20px ${selectedPhase?.color || '#FFF'})` : 'drop-shadow(0 4px 8px rgba(0, 0, 0, 0.3))'
//       }}
//       transition={{ 
//         duration: 0.8, 
//         delay: index * 0.3,
//         y: {
//           duration: 3,
//           repeat: Infinity,
//           ease: "easeInOut"
//         }
//       }}
//       whileHover={{ 
//         scale: 1.3, 
//         opacity: 1,
//         zIndex: 100
//       }}
//       onHoverStart={() => setIsHovered(true)}
//       onHoverEnd={() => setIsHovered(false)}
//     >
//       <div className={styles.landmarkIcon}>{landmark.icon}</div>
      
//       <AnimatePresence>
//         {isHovered && (
//           <motion.div 
//             className={styles.landmarkTooltip}
//             initial={{ opacity: 0, y: 10 }}
//             animate={{ opacity: 1, y: 0 }}
//             exit={{ opacity: 0, y: 10 }}
//           >
//             <div className={styles.tooltipTitle}>{landmark.name}</div>
//             <div className={styles.tooltipDesc}>{landmark.description}</div>
//           </motion.div>
//         )}
//       </AnimatePresence>
//     </motion.div>
//   );
// };

// // FIXED Static Path Component - No more mouse jitter!
// const StaticPath = ({ selectedPhase }) => {
//   const pathRef = useRef(null);
//   const isInView = useInView(pathRef, { once: true });

//   return (
//     <svg className={styles.pathSvg} viewBox="0 0 100 100" preserveAspectRatio="none">
//       <defs>
//         <linearGradient id="pathGradient" x1="0%" y1="0%" x2="100%" y2="0%">
//           <stop offset="0%" stopColor="#FF6B35" />
//           <stop offset="20%" stopColor="#4ECDC4" />
//           <stop offset="40%" stopColor="#45B7D1" />
//           <stop offset="60%" stopColor="#96CEB4" />
//           <stop offset="80%" stopColor="#FECA57" />
//           <stop offset="100%" stopColor="#E74C3C" />
//         </linearGradient>
        
//         <linearGradient id="selectedPathGradient" x1="0%" y1="0%" x2="100%" y2="0%">
//           <stop offset="0%" stopColor={selectedPhase?.color || "#FF6B35"} />
//           <stop offset="50%" stopColor={selectedPhase?.color || "#4ECDC4"} stopOpacity="0.8" />
//           <stop offset="100%" stopColor={selectedPhase?.color || "#E74C3C"} />
//         </linearGradient>
        
//         <filter id="pathGlow">
//           <feGaussianBlur stdDeviation="1" result="coloredBlur"/>
//           <feMerge> 
//             <feMergeNode in="coloredBlur"/>
//             <feMergeNode in="SourceGraphic"/>
//           </feMerge>
//         </filter>
        
//         <filter id="selectedPathGlow">
//           <feGaussianBlur stdDeviation="2" result="coloredBlur"/>
//           <feMerge> 
//             <feMergeNode in="coloredBlur"/>
//             <feMergeNode in="SourceGraphic"/>
//           </feMerge>
//         </filter>
//       </defs>
      
//       <path
//         d={STATIC_PATH}
//         fill="none"
//         stroke="rgba(255, 255, 255, 0.1)"
//         strokeWidth="0.3"
//         strokeDasharray="1,1"
//       />
      
//       <motion.path
//         ref={pathRef}
//         d={STATIC_PATH}
//         fill="none"
//         stroke={selectedPhase ? "url(#selectedPathGradient)" : "url(#pathGradient)"}
//         strokeWidth={selectedPhase ? "1.2" : "0.6"}
//         filter={selectedPhase ? "url(#selectedPathGlow)" : "url(#pathGlow)"}
//         strokeLinecap="round"
//         strokeLinejoin="round"
//         initial={{ pathLength: 0, opacity: 0 }}
//         animate={isInView ? { 
//           pathLength: 1, 
//           opacity: 1,
//           strokeWidth: selectedPhase ? [1.2, 1.8, 1.2] : 0.6
//         } : {}}
//         transition={{ 
//           duration: 3, 
//           ease: "easeInOut", 
//           delay: 0.5,
//           strokeWidth: {
//             duration: 2,
//             repeat: selectedPhase ? Infinity : 0,
//             ease: "easeInOut"
//           }
//         }}
//       />
      
//       <motion.g
//         initial={{ opacity: 0 }}
//         animate={isInView ? { 
//           opacity: 1,
//           offsetDistance: ["0%", "100%"]
//         } : {}}
//         transition={{
//           opacity: { duration: 0.5, delay: 2 },
//           offsetDistance: { 
//             duration: selectedPhase ? 4 : 6, 
//             repeat: Infinity, 
//             ease: "linear", 
//             delay: 2 
//           }
//         }}
//         style={{ offsetPath: `path('${STATIC_PATH}')` }}
//       >
//         <text 
//           x="0" 
//           y="0" 
//           fontSize="2" 
//           textAnchor="middle"
//           fill={selectedPhase?.color || "#FFD700"}
//         >
//           üöÄ
//         </text>
//       </motion.g>
      
//       {selectedPhase && (
//         <motion.circle
//           cx={selectedPhase.position.x}
//           cy={selectedPhase.position.y}
//           r="0"
//           fill="none"
//           stroke={selectedPhase.color}
//           strokeWidth="0.2"
//           opacity="0.6"
//           initial={{ r: 0 }}
//           animate={{ r: [0, 15, 0] }}
//           transition={{ duration: 2, repeat: Infinity, ease: "easeInOut" }}
//         />
//       )}
//     </svg>
//   );
// };

// // Enhanced Modal with all roadmap information
// const EnhancedModal = ({ phase, isOpen, onClose }) => {
//   if (!phase || !isOpen) return null;

//   return (
//     <AnimatePresence>
//       <motion.div 
//         className={styles.modalBackdrop}
//         initial={{ opacity: 0 }}
//         animate={{ opacity: 1 }}
//         exit={{ opacity: 0 }}
//         onClick={onClose}
//       >
//         <motion.div 
//           className={styles.enhancedModal}
//           initial={{ opacity: 0, scale: 0.8, y: 100 }}
//           animate={{ opacity: 1, scale: 1, y: 0 }}
//           exit={{ opacity: 0, scale: 0.8, y: 100 }}
//           onClick={(e) => e.stopPropagation()}
//         >
//           <div 
//             className={styles.modalHeader}
//             style={{ background: phase.gradient }}
//           >
//             <div className={styles.modalHeaderContent}>
//               <div className={styles.modalIcon}>{phase.icon}</div>
//               <div className={styles.modalTitleSection}>
//                 <h2>{phase.phase}: {phase.title}</h2>
//                 <p>{phase.duration}</p>
//                 <div className={styles.modalLandmark}>{phase.landmark}</div>
//               </div>
//               <button className={styles.closeButton} onClick={onClose}>‚úï</button>
//             </div>
//           </div>

//           <div className={styles.modalContent}>
//             <div className={styles.modalSection}>
//               <h3>üìç –û–ø–∏—Å –µ—Ç–∞–ø—É</h3>
//               <p>{phase.description}</p>
//             </div>

//             <div className={styles.modalStats}>
//               <div className={styles.modalStatCard}>
//                 <div className={styles.modalStatIcon}>üí∞</div>
//                 <div className={styles.modalStatValue}>{phase.price}</div>
//                 <div className={styles.modalStatLabel}>–¶—ñ–Ω–∞ —Ç–æ–∫–µ–Ω–∞</div>
//                 <div className={styles.modalStatSubLabel}>${phase.priceUSD.toFixed(6)}</div>
//               </div>
//               <div className={styles.modalStatCard}>
//                 <div className={styles.modalStatIcon}>ü™ô</div>
//                 <div className={styles.modalStatValue}>{phase.tokensAvailable}</div>
//                 <div className={styles.modalStatLabel}>–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–∫–µ–Ω—ñ–≤</div>
//                 <div className={styles.modalStatSubLabel}>{phase.percentage}% –≤—ñ–¥ –∑–∞–≥–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ</div>
//               </div>
//               <div className={styles.modalStatCard}>
//                 <div className={styles.modalStatIcon}>üìä</div>
//                 <div className={styles.modalStatValue}>{phase.percentage}%</div>
//                 <div className={styles.modalStatLabel}>–ß–∞—Å—Ç–∫–∞ —Ä–æ–∑–ø–æ–¥—ñ–ª—É</div>
//                 <div className={styles.modalStatSubLabel}>–í—ñ–¥ 1 –º—ñ–ª—å—è—Ä–¥–∞ —Ç–æ–∫–µ–Ω—ñ–≤</div>
//               </div>
//             </div>

//             <div className={styles.modalSection}>
//               <h3>üéØ –û—Å–Ω–æ–≤–Ω—ñ —Ü—ñ–ª—ñ –µ—Ç–∞–ø—É</h3>
//               <ul className={styles.modalList}>
//                 {phase.goals.map((goal, i) => (
//                   <motion.li 
//                     key={i}
//                     initial={{ opacity: 0, x: -20 }}
//                     animate={{ opacity: 1, x: 0 }}
//                     transition={{ delay: i * 0.1 }}
//                   >
//                     <span className={styles.listIcon}>ü¶ä</span>
//                     {goal}
//                   </motion.li>
//                 ))}
//               </ul>
//             </div>

//             <div className={styles.modalSection}>
//               <h3>üìã –ö–ª—é—á–æ–≤—ñ –∑–∞–≤–¥–∞–Ω–Ω—è</h3>
//               <div className={styles.tasksList}>
//                 {phase.tasks.map((task, i) => (
//                   <motion.div
//                     key={i}
//                     className={styles.taskItem}
//                     initial={{ opacity: 0, y: 20 }}
//                     animate={{ opacity: 1, y: 0 }}
//                     transition={{ delay: i * 0.1 }}
//                   >
//                     <div className={styles.taskWeek}>–¢–∏–∂–¥–µ–Ω—å {task.week}</div>
//                     <div className={styles.taskDescription}>{task.task}</div>
//                   </motion.div>
//                 ))}
//               </div>
//             </div>

//             <div className={styles.modalSection}>
//               <h3>üíé –†–æ–∑–ø–æ–¥—ñ–ª —Ç–æ–∫–µ–Ω—ñ–≤</h3>
//               <p className={styles.distributionText}>{phase.distribution}</p>
//             </div>

//             <motion.button 
//               className={styles.exploreButton}
//               style={{ background: phase.gradient }}
//               whileHover={{ scale: 1.02 }}
//               whileTap={{ scale: 0.98 }}
//               onClick={() => {
//                 toast.success(`–î–æ—Å–ª—ñ–¥–∂—É—î–º–æ ${phase.landmark}! üó∫Ô∏è`);
//                 confetti({
//                   particleCount: 50,
//                   spread: 60,
//                   origin: { y: 0.8 }
//                 });
//               }}
//             >
//               üîç –î–æ—Å–ª—ñ–¥–∏—Ç–∏ {phase.phase}
//             </motion.button>
//           </div>
//         </motion.div>
//       </motion.div>
//     </AnimatePresence>
//   );
// };

// // Simplified Price Progression Component
// const PriceProgression = ({ handlePhaseClick }) => {
//   return (
//     <motion.div 
//       className={styles.priceProgression}
//       initial={{ opacity: 0, y: 30 }}
//       whileInView={{ opacity: 1, y: 0 }}
//       transition={{ duration: 0.8 }}
//       style={{
//         maxWidth: '1000px',
//         margin: '3rem auto',
//         padding: '2rem',
//         background: 'rgba(255, 255, 255, 0.05)',
//         borderRadius: '20px',
//         textAlign: 'center'
//       }}
//     >
//       <h3 style={{
//         fontSize: '2rem',
//         marginBottom: '2rem',
//         background: 'linear-gradient(45deg, #FECA57, #F39C12)',
//         WebkitBackgroundClip: 'text',
//         WebkitTextFillColor: 'transparent',
//         backgroundClip: 'text'
//       }}>
//         üí∞ –ü—Ä–æ–≥—Ä–µ—Å—ñ—è —Ü—ñ–Ω–∏ —Ç–æ–∫–µ–Ω–∞
//       </h3>
//       <div style={{
//         display: 'flex',
//         justifyContent: 'space-between',
//         alignItems: 'center',
//         gap: '1rem',
//         flexWrap: 'wrap'
//       }}>
//         {ROADMAP_DATA.map((phase, index) => (
//           <motion.div
//             key={index}
//             style={{
//               background: phase.gradient,
//               borderRadius: '15px',
//               padding: '1rem',
//               minWidth: '120px',
//               cursor: 'pointer',
//               transition: 'all 0.3s ease'
//             }}
//             initial={{ scale: 0, opacity: 0 }}
//             whileInView={{ scale: 1, opacity: 1 }}
//             transition={{ delay: index * 0.1 }}
//             whileHover={{ scale: 1.05 }}
//             onClick={() => handlePhaseClick && handlePhaseClick(phase)}
//           >
//             <div style={{ fontSize: '1.2rem', fontWeight: 'bold', color: 'white' }}>
//               {phase.price}
//             </div>
//             <div style={{ fontSize: '0.9rem', color: 'rgba(255, 255, 255, 0.8)' }}>
//               {phase.phase}
//             </div>
//           </motion.div>
//         ))}
//       </div>
//     </motion.div>
//   );
// };

// // Background Animation Component
// const BackgroundElement = ({ element }) => {
//   const elementIcons = {
//     cloud: '‚òÅÔ∏è',
//     star: '‚≠ê'
//   };

//   return (
//     <motion.div
//       className={styles.backgroundElement}
//       style={{
//         left: `${element.position.x}%`,
//         top: `${element.position.y}%`,
//       }}
//       animate={{
//         x: [0, 50, 0],
//         opacity: [0.3, 0.6, 0.3]
//       }}
//       transition={{
//         duration: 20 / element.speed,
//         repeat: Infinity,
//         ease: "easeInOut"
//       }}
//     >
//       {elementIcons[element.type]}
//     </motion.div>
//   );
// };

// // Background elements
// const BACKGROUND_ELEMENTS = [
//   { id: 'clouds-1', type: 'cloud', position: { x: 20, y: 10 }, speed: 0.5 },
//   { id: 'clouds-2', type: 'cloud', position: { x: 60, y: 20 }, speed: 0.3 },
//   { id: 'clouds-3', type: 'cloud', position: { x: 80, y: 15 }, speed: 0.4 },
//   { id: 'stars-1', type: 'star', position: { x: 10, y: 5 }, speed: 0.2 },
//   { id: 'stars-2', type: 'star', position: { x: 90, y: 10 }, speed: 0.1 },
// ];

// // Main Component
// const CrazyRoadmapMap = () => {
//   const [selectedPhase, setSelectedPhase] = useState(null);
//   const [isModalOpen, setIsModalOpen] = useState(false);
//   const [viewMode, setViewMode] = useState('map');

//   const handlePhaseClick = (phase) => {
//     setSelectedPhase(phase);
//     setIsModalOpen(true);
//     toast.success(`üó∫Ô∏è –î–æ—Å–ª—ñ–¥–∂—É—î–º–æ ${phase.phase}!`, {
//       position: "top-center",
//       theme: "dark"
//     });
//   };

//   const handleCloseModal = () => {
//     setIsModalOpen(false);
//     setTimeout(() => setSelectedPhase(null), 300);
//   };

//   const toggleViewMode = () => {
//     const newMode = viewMode === 'map' ? 'satellite' : 'map';
//     setViewMode(newMode);
//     toast.info(`–ü–µ—Ä–µ–º–∏–∫–∞—î–º–æ –Ω–∞ ${newMode === 'satellite' ? '—Å—É–ø—É—Ç–Ω–∏–∫–æ–≤–∏–π' : '–∫–∞—Ä—Ç–∞'} —Ä–µ–∂–∏–º! üõ∞Ô∏è`);
//   };

//   // Calculate overall progress
//   const completedPhases = ROADMAP_DATA.filter(phase => phase.status === 'completed').length;
//   const inProgressPhases = ROADMAP_DATA.filter(phase => phase.status === 'in-progress').length;
//   const overallProgress = ((completedPhases + inProgressPhases * 0.5) / ROADMAP_DATA.length) * 100;

//   return (
//     <div className={`${styles.roadmapContainer} ${styles[viewMode]}`}>
//       {/* Header */}
//       <motion.div 
//         className={styles.mapHeader}
//         initial={{ opacity: 0, y: -50 }}
//         animate={{ opacity: 1, y: 0 }}
//         transition={{ duration: 0.8 }}
//       >
//         <div className={styles.headerContent}>
//           <h1 className={styles.mapTitle}>
//             üó∫Ô∏è CrazyFox Journey Map
//             <motion.span 
//               className={styles.compass}
//               animate={{ rotate: 360 }}
//               transition={{ duration: 10, repeat: Infinity, ease: "linear" }}
//             >
//               üß≠
//             </motion.span>
//           </h1>
//           <p className={styles.mapSubtitle}>
//             –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞ –∫–∞—Ä—Ç–∞ –Ω–∞—à–æ—ó –ø–æ–¥–æ—Ä–æ–∂—ñ –¥–æ –ú—ñ—Å—è—Ü—è! üöÄ
//           </p>
          
//           <div className={styles.mapControls}>
//             <motion.button 
//               className={styles.viewToggle}
//               onClick={toggleViewMode}
//               whileHover={{ scale: 1.05 }}
//               whileTap={{ scale: 0.95 }}
//               style={{
//                 background: viewMode === 'satellite' ? 'linear-gradient(45deg, #4ECDC4, #45B7D1)' : 'linear-gradient(45deg, #FF6B35, #F7931E)',
//                 border: 'none',
//                 color: 'white',
//                 padding: '0.8rem 1.5rem',
//                 borderRadius: '25px',
//                 fontSize: '1rem',
//                 fontWeight: 'bold',
//                 cursor: 'pointer',
//                 transition: 'all 0.3s ease',
//                 boxShadow: viewMode === 'satellite' ? '0 8px 25px rgba(78, 205, 196, 0.3)' : '0 8px 25px rgba(255, 107, 53, 0.3)'
//               }}
//             >
//               {viewMode === 'map' ? 'üõ∞Ô∏è –°—É–ø—É—Ç–Ω–∏–∫' : 'üó∫Ô∏è –ö–∞—Ä—Ç–∞'}
//             </motion.button>
            
//             <div className={styles.mapLegend}>
//               <div className={styles.legendItem}>
//                 <div className={styles.legendColor} style={{ background: '#2ECC71', width: '12px', height: '12px', borderRadius: '50%', marginRight: '8px' }}></div>
//                 <span style={{ fontSize: '0.9rem', color: 'rgba(255, 255, 255, 0.8)' }}>–ó–∞–≤–µ—Ä—à–µ–Ω–æ</span>
//               </div>
//               <div className={styles.legendItem}>
//                 <div className={styles.legendColor} style={{ background: '#F39C12', width: '12px', height: '12px', borderRadius: '50%', marginRight: '8px' }}></div>
//                 <span style={{ fontSize: '0.9rem', color: 'rgba(255, 255, 255, 0.8)' }}>–í –ø—Ä–æ—Ü–µ—Å—ñ</span>
//               </div>
//               <div className={styles.legendItem}>
//                 <div className={styles.legendColor} style={{ background: '#95A5A6', width: '12px', height: '12px', borderRadius: '50%', marginRight: '8px' }}></div>
//                 <span style={{ fontSize: '0.9rem', color: 'rgba(255, 255, 255, 0.8)' }}>–ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ</span>
//               </div>
//             </div>
//           </div>

//           {/* Overall Progress */}
//           <div className={styles.overallProgress}>
//             <div className={styles.progressInfo}>
//               <span>ü¶ä –ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å –ø–æ–¥–æ—Ä–æ–∂—ñ</span>
//               <span className={styles.progressPercentage}>{overallProgress.toFixed(1)}%</span>
//             </div>
//             <div className={styles.progressBar}>
//               <motion.div 
//                 className={styles.progressFill}
//                 initial={{ width: "0%" }}
//                 animate={{ width: `${overallProgress}%` }}
//                 transition={{ duration: 2, ease: "easeOut", delay: 1 }}
//               />
//             </div>
//           </div>
//         </div>
//       </motion.div>

//       {/* Distribution Overview */}
//       <div className={styles.distributionOverview}>
//         <h3>üí∞ –†–æ–∑–ø–æ–¥—ñ–ª —Ç–æ–∫–µ–Ω—ñ–≤ –ø–æ –µ—Ç–∞–ø–∞—Ö</h3>
//         <div className={styles.distributionGrid}>
//           {ROADMAP_DATA.map((phase, index) => (
//             <motion.div
//               key={phase.id}
//               className={styles.distributionCard}
//               initial={{ opacity: 0, y: 50 }}
//               animate={{ opacity: 1, y: 0 }}
//               transition={{ delay: index * 0.1 }}
//               whileHover={{ scale: 1.05 }}
//               onClick={() => handlePhaseClick(phase)}
//               style={{ cursor: 'pointer' }}
//             >
//               <div className={styles.distributionIcon}>{phase.icon}</div>
//               <div className={styles.distributionValue}>{phase.percentage}%</div>
//               <div className={styles.distributionLabel}>{phase.phase}</div>
//               <div className={styles.distributionAmount}>{phase.tokensAvailable} —Ç–æ–∫–µ–Ω—ñ–≤</div>
//             </motion.div>
//           ))}
//         </div>
//       </div>

//       {/* Price Evolution */}
//       <div className={styles.priceEvolution}>
//         <h3>üìà –ï–≤–æ–ª—é—Ü—ñ—è —Ü—ñ–Ω–∏ —Ç–æ–∫–µ–Ω–∞</h3>
//         <div className={styles.priceChart}>
//           {ROADMAP_DATA.map((phase, index) => (
//             <motion.div
//               key={phase.id}
//               className={styles.priceStep}
//               initial={{ opacity: 0, y: 20 }}
//               animate={{ opacity: 1, y: 0 }}
//               transition={{ delay: index * 0.2, duration: 0.8 }}
//             >
//               <motion.div
//                 className={styles.priceBar}
//                 style={{ 
//                   background: phase.gradient,
//                   height: `${30 + (index * 25)}px`, // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –≤—ã—Å–æ—Ç–∞
//                   width: '40px',
//                   borderRadius: '20px 20px 0 0',
//                   cursor: 'pointer',
//                   transition: 'all 0.3s ease'
//                 }}
//                 whileHover={{ scale: 1.1 }}
//                 onClick={() => handlePhaseClick(phase)}
//                 initial={{ height: 0 }}
//                 animate={{ height: `${30 + (index * 25)}px` }}
//                 transition={{ delay: index * 0.3, duration: 0.6 }}
//               />
//               <div className={styles.priceLabel}>
//                 <div className={styles.pricePhase}>{phase.phase}</div>
//                 <div className={styles.priceValue}>{phase.price}</div>
//               </div>
//             </motion.div>
//           ))}
//         </div>
//       </div>

//       {/* Price Progression - Updated to receive handlePhaseClick */}
//       <PriceProgression handlePhaseClick={handlePhaseClick} />

//       {/* Main Map Container with view mode effects */}
//       <div className={`${styles.mapContainer} ${viewMode === 'satellite' ? styles.satelliteView : ''}`}>
//         {/* Weather Effects */}
//         <WeatherEffects selectedPhase={selectedPhase} />
        
//         {/* Satellite overlay effect */}
//         {viewMode === 'satellite' && (
//           <motion.div 
//             className={styles.satelliteOverlay}
//             initial={{ opacity: 0 }}
//             animate={{ opacity: 0.3 }}
//             transition={{ duration: 1 }}
//           />
//         )}

//         {/* Background elements */}
//         {BACKGROUND_ELEMENTS.map((element, index) => (
//           <BackgroundElement key={element.id} element={element} />
//         ))}

//         {/* Fixed Static Path */}
//         <StaticPath selectedPhase={selectedPhase} />

//         {/* Landmarks */}
//         {LANDMARKS.map((landmark, index) => (
//           <Landmark 
//             key={landmark.id} 
//             landmark={landmark} 
//             index={index}
//             selectedPhase={selectedPhase}
//           />
//         ))}

//         {/* Roadmap Phases */}
//         {ROADMAP_DATA.map((phase, index) => (
//           <RoadmapPhase
//             key={phase.id}
//             phase={phase}
//             index={index}
//             isActive={selectedPhase?.id === phase.id}
//             onClick={handlePhaseClick}
//             selectedPhase={selectedPhase}
//           />
//         ))}

//         {/* Moon Destination */}
//         <motion.div
//           className={styles.moonDestination}
//           style={{ left: '90%', top: '5%' }}
//           initial={{ opacity: 0, scale: 0 }}
//           animate={{ 
//             opacity: 1, 
//             scale: selectedPhase?.id === 6 ? 1.2 : 1,
//             filter: selectedPhase?.id === 6 ? 'drop-shadow(0 0 30px #FFD700)' : 'drop-shadow(0 0 20px rgba(255, 255, 255, 0.5))'
//           }}
//           transition={{ delay: 2, duration: 0.8 }}
//         >
//           <div className={styles.moonIcon}>üåô</div>
//           <div className={styles.moonText}>–î–û –ú–Ü–°–Ø–¶–Ø!</div>
//           <div className={styles.moonSubtext}>–ù–∞—à–∞ –∫—ñ–Ω—Ü–µ–≤–∞ —Ü—ñ–ª—å</div>
//         </motion.div>

//         {/* Animated rocket */}
//         <motion.div 
//           className={styles.rocket}
//           style={{
//             position: 'absolute',
//             fontSize: '2rem',
//             zIndex: 20,
//             pointerEvents: 'none'
//           }}
//           animate={{
//             offsetDistance: ["0%", "100%"]
//           }}
//           transition={{
//             duration: 8,
//             repeat: Infinity,
//             ease: "linear"
//           }}
//           style={{ offsetPath: `path('${STATIC_PATH}')` }}
//         >
//           üöÄ
//         </motion.div>
//       </div>

//       {/* Simplified Stats Dashboard */}
//       <motion.div 
//         initial={{ opacity: 0, y: 50 }}
//         whileInView={{ opacity: 1, y: 0 }}
//         transition={{ duration: 0.8 }}
//         style={{
//           maxWidth: '1000px',
//           margin: '4rem auto',
//           padding: '0 2rem',
//           textAlign: 'center'
//         }}
//       >
//         <div style={{
//           fontSize: '2.5rem',
//           fontWeight: 'bold',
//           marginBottom: '2rem',
//           background: 'linear-gradient(45deg, #E74C3C, #C0392B)',
//           WebkitBackgroundClip: 'text',
//           WebkitTextFillColor: 'transparent',
//           backgroundClip: 'text'
//         }}>
//           üìä Mission Statistics
//         </div>
//         <div style={{
//           display: 'grid',
//           gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',
//           gap: '1.5rem'
//         }}>
//           {[
//             { icon: 'üéØ', value: `${completedPhases}/6`, label: '–ï—Ç–∞–ø—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ' },
//             { icon: '‚è∞', value: '540', label: '–î–Ω—ñ–≤ –º—ñ—Å—ñ—ó' },
//             { icon: 'ü™ô', value: '1B', label: '–ó–∞–≥–∞–ª—å–Ω—ñ —Ç–æ–∫–µ–Ω–∏' },
//             { icon: 'üìà', value: '100x', label: '–ü–æ—Ç–µ–Ω—Ü—ñ–∞–ª –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è' }
//           ].map((stat, index) => (
//             <motion.div
//               key={index}
//               initial={{ opacity: 0, y: 20 }}
//               whileInView={{ opacity: 1, y: 0 }}
//               transition={{ delay: index * 0.1 }}
//               whileHover={{ scale: 1.05 }}
//               style={{
//                 background: 'rgba(255, 255, 255, 0.05)',
//                 backdropFilter: 'blur(20px)',
//                 borderRadius: '20px',
//                 padding: '1.5rem',
//                 border: '1px solid rgba(231, 76, 60, 0.1)',
//                 transition: 'all 0.3s ease',
//                 cursor: 'pointer'
//               }}
//             >
//               <div style={{ fontSize: '2.5rem', marginBottom: '0.5rem' }}>{stat.icon}</div>
//               <div style={{
//                 fontSize: '2rem',
//                 fontWeight: 'bold',
//                 color: '#E74C3C',
//                 marginBottom: '0.5rem'
//               }}>
//                 {stat.value}
//               </div>
//               <div style={{ color: 'white', fontSize: '1rem' }}>{stat.label}</div>
//             </motion.div>
//           ))}
//         </div>
//       </motion.div>

//       {/* Simplified CTA Section */}
//       <motion.div 
//         initial={{ opacity: 0, scale: 0.8 }}
//         whileInView={{ opacity: 1, scale: 1 }}
//         transition={{ duration: 0.8 }}
//         style={{
//           textAlign: 'center',
//           margin: '4rem auto',
//           maxWidth: '600px',
//           padding: '0 2rem'
//         }}
//       >
//         <h3 style={{
//           fontSize: '2.2rem',
//           marginBottom: '1rem',
//           background: 'linear-gradient(45deg, #FF6B35, #4ECDC4)',
//           WebkitBackgroundClip: 'text',
//           WebkitTextFillColor: 'transparent',
//           backgroundClip: 'text'
//         }}>
//           –ì–æ—Ç–æ–≤–∏–π —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –ø—Ä–∏–≥–æ–¥—É? ü¶ä
//         </h3>
//         <p style={{
//           fontSize: '1.1rem',
//           color: 'rgba(255, 255, 255, 0.7)',
//           marginBottom: '2rem'
//         }}>
//           –ü—Ä–∏—î–¥–Ω—É–π—Å—è –¥–æ –Ω–∞–π–µ–ø—ñ—á–Ω—ñ—à–æ—ó –∫—Ä–∏–ø—Ç–æ–ø–æ–¥–æ—Ä–æ–∂—ñ!
//         </p>
//         <motion.button 
//           whileHover={{ scale: 1.05 }}
//           whileTap={{ scale: 0.95 }}
//           onClick={() => {
//             confetti({
//               particleCount: 300,
//               spread: 100,
//               origin: { y: 0.8 }
//             });
//           }}
//           style={{
//             background: 'linear-gradient(45deg, #FF6B35, #F7931E)',
//             border: 'none',
//             color: 'white',
//             padding: '1.2rem 2.5rem',
//             borderRadius: '50px',
//             fontSize: '1.2rem',
//             fontWeight: 'bold',
//             cursor: 'pointer',
//             transition: 'all 0.3s ease',
//             boxShadow: '0 10px 30px rgba(255, 107, 53, 0.3)'
//           }}
//         >
//           üó∫Ô∏è –†–æ–∑–ø–æ—á–∞—Ç–∏ –ø—Ä–∏–≥–æ–¥—É!
//         </motion.button>
//       </motion.div>

//       {/* Enhanced Modal */}
//       <EnhancedModal 
//         phase={selectedPhase} 
//         isOpen={isModalOpen} 
//         onClose={handleCloseModal} 
//       />
//     </div>
//   );
// };

// export default CrazyRoadmapMap;